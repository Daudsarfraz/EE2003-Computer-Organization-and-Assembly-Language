     1                                  [org 0x0100]
     2                                  
     3 00000000 E90300                  jmp start       
     4                                  
     5 00000003 0D                      multiplicand: db 13      ;we 4-bit number, save space of 8-bits 
     6 00000004 05                      multiplier:   db 5       ; 4-bit number 
     7                                  
     8 00000005 00                      result:       db 0       ; 8-bit result 13 = 1101 , 05 = 0101 ,1101 x 0101 = 
     9                                  
    10                                  start: 
    11                                  
    12 00000006 B104                        mov  cl, 4            ; how many times we need to run the loop 
    13 00000008 8A1E[0300]                  mov  bl, [multiplicand]
    14 0000000C 8A16[0400]                  mov  dl, [multiplier]
    15                                  
    16                                  
    17                                      checkbit: 
    18 00000010 D0EA                            shr  dl, 1        ; do the rotation so that right bit is thrown in CF 
    19 00000012 7304                            jnc  skip 
    20 00000014 001E[0500]                          add [result], bl     ; only add if CF IS SET 
    21                                  
    22                                  
    23                                          skip: 
    24 00000018 D0E3                            shl  bl, 1         ; always shift the multiplicand 
    25                                  
    26 0000001A FEC9                        dec  cl 
    27 0000001C 75F2                        jnz  checkbit 
    28                                  
    29                                  
    30 0000001E B8004C                      mov  ax, 0x4c00 
    31 00000021 CD21                        int  0x21 
